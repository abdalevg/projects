Input: MAPF instance
Root.constraints = {0}
Root.solution = find individual paths by the low_level_search()
Root.cost = SIC(Root.solution)
insert Root to OPEN

while OPEN not empty do
    P <- best node from OPEN // lowest solution cost
    Validate the paths in P until a conflict occurs
    if P has no conflict then
         return P.solution // P is goal
    C <- first conflict (a[i], a[j], v, t) in P
    foreach agent a[i] in C do
       A <- new node
       A.constraints <- P.constraints + (a[i], v, t)
       A.solution <- P.solution
       Update A.solution by invoking low level(a[i])
       A.cost = SIC(A.solution)
       if A.cost < inf // A solution was found then
           Insert A to OPEN      


\begin{algorithm}
\caption{High level of CBS}\label{euclid}
\begin{algorithmic}[1]
\while {${OPEN}$ not empty} \do
    \State $P \gets \text{best node from ${OPEN}$}
    \text{Validate the paths in $P} \until {a conflict occurs} 
    \if { $P has no conflict }
      \State {${P.solution}$}
    \State $C \gets { first conflict $(a[i], a[j], v, t)$ in $P }    
    \for { agent $a[i]$ in $C } \do
      \State $A \gets {new node}
      \State ${A.constraints} \gets { ${P.constraints}$ + $(a[i], v, t)$ }
      \State ${A.solution}$ \gets ${P.solution}$
      \text{Update ${A.solution}$ by invoking $low_level_search(a[i])$}
      \text{A.cost = SIC(A.solution)}      
    \endfor
    \endif
\endwhile
\end{algorithmic}
\end{algorithm}
\end{document}
